

import os
import sys
import logging
import functools
from termcolor import colored


@functools.lru_cache()
def create_logger(output_dir, dist_rank=0, name=''):
    # create logger
    logger = logging.getLogger(name)#用logging.getLogger(name)方法进行初始化，name可以不填。通常logger的名字我们对应模块名，如聊天模块、数据库模块、验证模块等。
    logger.setLevel(logging.DEBUG) #设置日志等级 CRITICAL : 'CRITICAL',ERROR : 'ERROR',WARNING : 'WARNING',INFO : 'INFO',DEBUG : 'DEBUG',NOTSET : 'NOTSET',一旦设置了日志等级，则调用比等级低的日志记录函数则不会输出，
    logger.propagate = False

    # create formatter
    fmt = '[%(asctime)s %(name)s] (%(filename)s %(lineno)d): %(levelname)s %(message)s'
    color_fmt = colored('[%(asctime)s %(name)s]', 'green') + \
                colored('(%(filename)s %(lineno)d)', 'yellow') + ': %(levelname)s %(message)s'

    # create console handlers for master process
    if dist_rank == 0:
        console_handler = logging.StreamHandler(sys.stdout) #stream输出到控制台
        console_handler.setLevel(logging.DEBUG)
        console_handler.setFormatter(
            logging.Formatter(fmt=color_fmt, datefmt='%Y-%m-%d %H:%M:%S'))#设置用于在Handler实例如上创建日志消息的消息格式化对象
        logger.addHandler(console_handler)

    # create file handlers
    file_handler = logging.FileHandler(os.path.join(output_dir, f'log_rank{dist_rank}.txt'), mode='a') #输出到指定的日志文件
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(logging.Formatter(fmt=fmt, datefmt='%Y-%m-%d %H:%M:%S'))
    logger.addHandler(file_handler)

    return logger
